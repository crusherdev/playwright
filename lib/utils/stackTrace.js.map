{"version":3,"sources":["../../src/utils/stackTrace.ts"],"names":["stackUtils","StackUtils","rewriteErrorMessage","e","newMessage","stack","index","indexOf","message","substring","length","PW_LIB_DIRS","path","join","map","packageName","sep","runnerNpmPkgLib","runnerLib","runnerSrc","includesFileInPlaywrightSubDir","subDir","fileName","p","some","libDir","includes","captureStackTrace","stackTraceLimit","Error","error","frames","frameTexts","lines","split","reverse","apiName","isTesting","process","env","PWTEST_CLI_ALLOW_TEST_COMMAND","line","frame","parseLine","file","startsWith","resolve","cwd","isFilePartOfPlaywright","function","toLowerCase","slice","push","column","isPlaywrightTest","isLocalPlaywright","isInPlaywright","splitErrorMessage","separationIdx","name"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport path from 'path';\nimport { StackFrame } from '../protocol/channels';\nimport StackUtils from 'stack-utils';\nimport { isUnderTest } from './utils';\n\nconst stackUtils = new StackUtils();\n\nexport function rewriteErrorMessage(e: Error, newMessage: string): Error {\n  if (e.stack) {\n    const index = e.stack.indexOf(e.message);\n    if (index !== -1)\n      e.stack = e.stack.substring(0, index) + newMessage + e.stack.substring(index + e.message.length);\n  }\n  e.message = newMessage;\n  return e;\n}\n\nconst PW_LIB_DIRS = [\n  'playwright',\n  'playwright-chromium',\n  'playwright-firefox',\n  'playwright-webkit',\n  path.join('@playwright', 'test'),\n].map(packageName => path.sep + packageName);\n\nconst runnerNpmPkgLib = path.join('@playwright', 'test', 'lib', 'test');\nconst runnerLib = path.join('lib', 'test');\nconst runnerSrc = path.join('src', 'test');\n\nfunction includesFileInPlaywrightSubDir(subDir: string, fileName: string) {\n  return PW_LIB_DIRS.map(p => path.join(p, subDir)).some(libDir => fileName.includes(libDir));\n}\n\nexport type ParsedStackTrace = {\n  frames: StackFrame[];\n  frameTexts: string[];\n  apiName: string;\n};\n\nexport function captureStackTrace(): ParsedStackTrace {\n  const stackTraceLimit = Error.stackTraceLimit;\n  Error.stackTraceLimit = 30;\n  const error = new Error();\n  const stack = error.stack!;\n  Error.stackTraceLimit = stackTraceLimit;\n  const frames: StackFrame[] = [];\n  const frameTexts: string[] = [];\n  const lines = stack.split('\\n').reverse();\n  let apiName = '';\n\n  const isTesting = !!process.env.PWTEST_CLI_ALLOW_TEST_COMMAND || isUnderTest();\n\n  for (const line of lines) {\n    const frame = stackUtils.parseLine(line);\n    if (!frame || !frame.file)\n      continue;\n    if (frame.file.startsWith('internal'))\n      continue;\n    const fileName = path.resolve(process.cwd(), frame.file);\n    if (isTesting && fileName.includes(path.join('playwright', 'tests', 'config', 'coverage.js')))\n      continue;\n    if (isFilePartOfPlaywright(isTesting, fileName)) {\n      apiName = frame.function ? frame.function[0].toLowerCase() + frame.function.slice(1) : '';\n      break;\n    }\n    frameTexts.push(line);\n    frames.push({\n      file: fileName,\n      line: frame.line,\n      column: frame.column,\n      function: frame.function,\n    });\n  }\n  frames.reverse();\n  frameTexts.reverse();\n  return { frames, frameTexts, apiName };\n}\n\nfunction isFilePartOfPlaywright(isTesting: boolean, fileName: string): boolean {\n  const isPlaywrightTest = fileName.includes(runnerNpmPkgLib);\n  const isLocalPlaywright = isTesting && (fileName.includes(runnerSrc) || fileName.includes(runnerLib));\n  const isInPlaywright = (includesFileInPlaywrightSubDir('src', fileName) || includesFileInPlaywrightSubDir('lib', fileName));\n  return !isPlaywrightTest && !isLocalPlaywright && isInPlaywright;\n}\n\nexport function splitErrorMessage(message: string): { name: string, message: string } {\n  const separationIdx = message.indexOf(':');\n  return {\n    name: separationIdx !== -1 ? message.slice(0, separationIdx) : '',\n    message: separationIdx !== -1 && separationIdx + 2 <= message.length ? message.substring(separationIdx + 2) : message,\n  };\n}\n"],"file":"stackTrace.js"}